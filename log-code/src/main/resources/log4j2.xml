<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: All < Trace < Debug < Info < Warn < Error < Fatal < OFF -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<Configuration status="warn" name="XInclude" monitorInterval="30">
    <Properties>
        <Property name="PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} %5p [%t] %-40.40c{1.} : %m%n"/>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <!--<property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n" />-->
        <!-- 定义日志存储的路径 -->
        <property name="FILE_PATH" value="log4j2/"/>
    </Properties>
    <Appenders>
        <!-- 输出到控制台，仅在本地开发环境使用 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${PATTERN}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
        <File name="log" fileName="${FILE_PATH}/test.log" append="false">
            <PatternLayout pattern="${PATTERN}"/>
        </File>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info.log"
                     filePattern="${FILE_PATH}/archives/INFO-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!--默认一天一个文件-->
                <TimeBasedTriggeringPolicy/>
                <!--一天内大于size就单独分隔-->
                <SizeBasedTriggeringPolicy size="1 GB"/>
            </Policies>
        </RollingFile>

        <!-- 这个会打印出所有的warn及以下级别的信息-->
        <RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/warn.log"
                     filePattern="${FILE_PATH}/archives/WARN-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!--默认一天一个文件-->
                <TimeBasedTriggeringPolicy/>
                <!--一天内大于size就单独分隔-->
                <SizeBasedTriggeringPolicy size="1 GB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

        <!-- 这个会打印出所有的error及以下级别的信息-->
        <RollingFile name="RollingFileError" fileName="${FILE_PATH}/error.log"
                     filePattern="${FILE_PATH}/ERROR-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>
    </Appenders>
    <Loggers>
        <!-- 添加你的自定义logger，一般用于区分包名的日志，不同包名不同的级别appender -->
        <!-- additivity 意思是，调用完当前appender，是否继续调用parent logger appender，默认true-->
        <logger name="org.springframework.jdbc" level="info" additivity="true"/>
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
        <Logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>
        <!--默认的Root Logger 级别-->
        <Root level="INFO">
            <!--这里需要区分下环境（配合maven profile之类的）-->
            <!-- 开发环境使用Console Appender，生产环境使用File Appender -->
            <AppenderRef ref="log"/>
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingFileInfo"/>
            <AppenderRef ref="RollingFileWarn"/>
            <AppenderRef ref="RollingFileError"/>
        </Root>
    </Loggers>
</Configuration>


        <!--  %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间,输出到毫秒的时间-->
        <!--  %-5level : 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0-->
        <!--  %c : logger的名称(%logger)-->
        <!--  %t : 输出当前线程名称-->
        <!--  %p : 日志输出格式-->
        <!--  %m : 日志内容，即 logger.info("message")-->
        <!--  %n : 换行符-->
        <!--  %C : Java类名(%F)-->
        <!--  %L : 行号-->
        <!--  %M : 方法名-->
        <!--  %l : 输出语句所在的行数, 包括类名、方法名、文件名、行数-->
        <!--  hostName : 本地机器名-->
        <!--  hostAddress : 本地ip地址-->