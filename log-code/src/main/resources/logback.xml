<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <contextName>${APP_NAME}</contextName>
    <!-- 定义变量 -->
    <springProperty name="APP_NAME" scope="context" source="spring.application.name"/>
    <springProperty name="LOG_INFO_FILE" scope="context" source="logging.file"
                    defaultValue="logback/${APP_NAME}/info.log"/>
    <springProperty name="LOG_ERROR_FILE" scope="context" source="logging.file"
                    defaultValue="logback/${APP_NAME}/error.log"/>

    <!--appender 指定日志策略（日志具体规则），name 定义了当前策略名称-->
    <!-- console_strategy 策略 -->
    <appender name="console_strategy" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>[%d{yyyy-MM-dd' 'HH:mm:ss.sss}] [%C] [%t] [%L] [%-5p] %m%n</pattern>
        </layout>
    </appender>

    <!-- info_strategy 策略 -->
    <appender name="info_strategy" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--encoder和pattern节点组合用于具体输出的日志格式。-->
        <encoder>
            <pattern>[%d{yyyy-MM-dd' 'HH:mm:ss.sss}] [%C] [%t] [%L] [%-5p] %m%n</pattern>
        </encoder>

        <!--滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--fileNamePattern，必要节点，可以用来设置指定时间的日志归档，每天将日志归档 -->
            <fileNamePattern>${LOG_INFO_FILE}</fileNamePattern>
            <!--maxHistory ,可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,，例如设置为30的话，则30天之后，旧的日志就会被删除-->
            <maxHistory>30</maxHistory>
            <!--一天内大于size就单独分隔-->
            <maxFileSize>1 GB</maxFileSize>
            <!--totalSizeCap，可选节点，用来指定日志文件的上限大小，例如设置为3GB的话，那么到了这个值，就会删除旧的日志-->
        </rollingPolicy>
    </appender>

    <!-- error_strategy 策略 -->
    <appender name="error_strategy" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--系统定义的拦截器，用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd' 'HH:mm:ss.sss}] [%C] [%t] [%L] [%-5p] %m%n</pattern>
        </encoder>
        <!--滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--路径 -->
            <fileNamePattern>${LOG_ERROR_FILE}</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!--除了用TimeBasedRollingPolicy策略，还可以用SizeAndTimeBasedRollingPolicy，配置子节点的maxFileSize来指定单个日志文件的大小-->
    <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>log.txt</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天一归档 -->
            <fileNamePattern>log-%d{yyyy-MM-dd}.%i.txt</fileNamePattern>
            <!-- 单个日志文件最多 100MB, 60天的日志周期，最大不能超过20GB -->
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%msg%n</pattern>
        </encoder>
    </appender>

    <!-- 异步输出 添加一个基于异步写日志的appender，并指向原先配置的appender即可 -->
    <appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="INFO-LOG"/>
    </appender>

    <appender name="ASYNC-ERROR" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="ERROR-LOG"/>
    </appender>

    <!--<root> 用来指定最基础的日志输出级别。appender-ref 指定了上面的3个日志策略。-->
    <root level="info">
        <appender-ref ref="console_strategy"/>
        <appender-ref ref="info_strategy"/>
        <appender-ref ref="error_strategy"/>
    </root>
</configuration>